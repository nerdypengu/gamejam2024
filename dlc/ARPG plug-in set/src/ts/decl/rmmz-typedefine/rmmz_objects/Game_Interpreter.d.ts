declare class Game_Interpreter {
    protected _depth: number;
    protected _branch: any;
    protected _indent: number;
    protected _frameCount: number;
    protected _freezeChecker: number;
    protected _mapId: number;
    protected _eventId: number;
    protected _list: RMMZData.EventCommand[] | null;
    protected _index: number;
    protected _waitCount: number;
    protected _waitMode: string;
    protected _comments: any;
    protected _characterId: number;
    protected _childInterpreter: Game_Interpreter | null;
    constructor(depth?: number);
    initialize(depth?: number): void;
    checkOverflow(): void;
    clear(): void;
    setup(list: RMMZData.EventCommand[], eventId?: number): void;
    loadImages(): void;
    eventId(): number;
    isOnCurrentMap(): boolean;
    setupReservedCommonEvent(): boolean;
    isRunning(): boolean;
    update(): void;
    updateChild(): boolean;
    updateWait(): boolean | null;
    updateWaitCount(): boolean;
    updateWaitMode(): boolean | null;
    setWaitMode(waitMode: string): void;
    wait(duration: number): void;
    fadeSpeed(): number;
    executeCommand(this: any): boolean;
    checkFreeze(): boolean;
    terminate(): void;
    skipBranch(): void;
    currentCommand(): RMMZData.EventCommand;
    nextEventCode(): number;
    iterateActorId(param: number, callback: (actor: Game_Actor) => void): void;
    iterateActorEx(param1: number, param2: any, callback: (actor: Game_Actor) => void): void;
    iterateActorIndex(param: number, callback: (actor: Game_Actor) => void): void;
    iterateEnemyIndex(param: number, callback: (enemy: Game_Enemy) => void): void;
    iterateBattler(param1: number, param2: any, callback: (battler: Game_Battler) => void): void;
    character(param: number): Game_Player | Game_Event | null;
    operateValue(operation: number, operandType: number, operand: any): any;
    changeHp(target: Game_Battler, value: number, allowDeath: any): void;
    command101(params: any[]): boolean;
    command102(params: any): boolean;
    setupChoices(params: string | any[]): void;
    command402(params: any[]): boolean;
    command403(): boolean;
    command103(params: any): boolean;
    setupNumInput(params: any[]): void;
    command104(params: any): boolean;
    setupItemChoice(params: any[]): void;
    command105(params: any[]): boolean;
    command108(params: any[]): boolean;
    command109(): boolean;
    command111(params: any[]): boolean;
    command411(): boolean;
    command112(): boolean;
    command413(): boolean;
    command113(): boolean;
    command115(): boolean;
    command117(params: number[]): boolean;
    setupChild(list: any, eventId: number): void;
    command118(): boolean;
    command119(params: any[]): boolean;
    jumpTo(index: number): void;
    command121(params: number[]): boolean;
    command122(params: any[]): boolean;
    gameDataOperand(type: any, param1: number, param2: number): number;
    operateVariable(variableId: any, operationType: any, value: number): void;
    command123(params: any[]): boolean;
    command124(params: number[]): boolean;
    command125(params: any[]): boolean;
    command126(params: number[]): boolean;
    command127(params: any[]): boolean;
    command128(params: any[]): boolean;
    command129(params: any[]): boolean;
    command132(params: any[]): boolean;
    command133(params: any[]): boolean;
    command134(params: number[]): boolean;
    command135(params: number[]): boolean;
    command136(params: number[]): boolean;
    command137(params: number[]): boolean;
    command138(params: any[]): boolean;
    command139(params: any[]): boolean;
    command140(params: any[]): boolean;
    command201(params: any[]): boolean;
    command202(params: any[]): boolean;
    command203(params: any[]): boolean;
    command204(params: any[]): boolean;
    command205(params: any[]): boolean;
    command206(): boolean;
    command211(params: number[]): boolean;
    command212(params: any[]): boolean;
    command213(params: any[]): boolean;
    command214(): boolean;
    command216(params: number[]): boolean;
    command217(): boolean;
    command221(): boolean;
    command222(): boolean;
    command223(params: any[]): boolean;
    command224(params: any[]): boolean;
    command225(params: any[]): boolean;
    command230(params: any[]): boolean;
    command231(params: any[]): boolean;
    command232(params: any[]): boolean;
    picturePoint(params: any[]): Point;
    command233(params: any[]): boolean;
    command234(params: any[]): boolean;
    command235(params: any[]): boolean;
    command236(params: any[]): boolean;
    command241(params: IAudioObject[]): boolean;
    command242(params: number[]): boolean;
    command243(): boolean;
    command244(): boolean;
    command245(params: any[]): boolean;
    command246(params: number[]): boolean;
    command249(params: {
        name: any;
    }[]): boolean;
    command250(params: {
        name: any;
    }[]): boolean;
    command251(): boolean;
    command261(params: any[]): boolean;
    videoFileExt(): ".webm" | ".mp4";
    command281(params: number[]): boolean;
    command282(params: any[]): boolean;
    command283(params: any[]): boolean;
    command284(params: any[]): boolean;
    command285(params: any[]): boolean;
    command301(params: any[]): boolean;
    command601(): boolean;
    command602(): boolean;
    command603(): boolean;
    command302(params: any[]): boolean;
    command303(params: any[]): boolean;
    command311(params: any[]): boolean;
    command312(params: any[]): boolean;
    command326(params: any[]): boolean;
    command313(params: any[]): boolean;
    command314(params: any[]): boolean;
    command315(params: any[]): boolean;
    command316(params: any[]): boolean;
    command317(params: any[]): boolean;
    command318(params: any[]): boolean;
    command319(params: any[]): boolean;
    command320(params: any[]): boolean;
    command321(params: any[]): boolean;
    command322(params: any[]): boolean;
    command323(params: any[]): boolean;
    command324(params: any[]): boolean;
    command325(params: any[]): boolean;
    command331(params: any[]): boolean;
    command332(params: any[]): boolean;
    command342(params: any[]): boolean;
    command333(params: any[]): boolean;
    command334(params: any[]): boolean;
    command335(params: any[]): boolean;
    command336(params: any[]): boolean;
    command337(params: any[]): boolean;
    command339(params: any[]): boolean;
    command340(): boolean;
    command351(): boolean;
    command352(): boolean;
    command353(): boolean;
    command354(): boolean;
    command355(): boolean;
    command356(params: string[]): boolean;
    pluginCommand(command: any, args: any): void;
    command357(params: any[]): boolean;
}
