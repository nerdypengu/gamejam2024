declare class Window_Base extends _Window {
    protected _opening: boolean;
    protected _closing: boolean;
    protected _dimmerSprite: Sprite | null;
    constructor(rect: Rectangle);
    initialize(...args: any[]): void;
    destroy(options: any): void;
    checkRectObject(rect: any): void;
    lineHeight(): number;
    itemWidth(): number;
    itemHeight(): number;
    itemPadding(): number;
    baseTextRect(): Rectangle;
    loadWindowskin(): void;
    updatePadding(): void;
    updateBackOpacity(): void;
    fittingHeight(numLines: number): number;
    updateTone(): void;
    createContents(): void;
    destroyContents(): void;
    contentsWidth(): number;
    contentsHeight(): number;
    resetFontSettings(): void;
    resetTextColor(): void;
    update(): void;
    updateOpen(): void;
    updateClose(): void;
    open(): void;
    close(): void;
    isOpening(): boolean;
    isClosing(): boolean;
    show(): void;
    hide(): void;
    activate(): void;
    deactivate(): void;
    systemColor(): string;
    translucentOpacity(): number;
    changeTextColor(color: any): void;
    changeOutlineColor(color: string): void;
    changePaintOpacity(enabled: number | boolean | null): void;
    drawRect(x: number, y: number, width: number, height: number): void;
    drawText(text: string | number, x: number, y: number, maxWidth?: number, align?: CanvasTextAlign): void;
    textWidth(text: string): number;
    drawTextEx(text: any, x: number, y: number, width: number): any;
    textSizeEx(text: any): {
        width: any;
        height: any;
    };
    createTextState(text: any, x: number, y: number, width: number): any;
    processAllText(textState: {
        index?: any;
        text?: any;
    }): void;
    flushTextState(textState: any): void;
    createTextBuffer(rtl: boolean): "" | "â€«";
    convertEscapeCharacters(text: string): string;
    actorName(n: number): string;
    partyMemberName(n: number): string;
    processCharacter(textState: any): void;
    processControlCharacter(textState: any, c: string): void;
    processNewLine(textState: {
        x: any;
        startX: any;
        y: any;
        height: any;
    }): void;
    obtainEscapeCode(textState: {
        text: string;
        index: number;
    }): string;
    obtainEscapeParam(textState: any): number | "";
    processEscapeCharacter(code: string, textState: any): void;
    processColorChange(colorIndex: number): void;
    processDrawIcon(iconIndex: number, textState: any): void;
    makeFontBigger(): void;
    makeFontSmaller(): void;
    calcTextHeight(textState: any): number;
    maxFontSizeInLine(line: string): number;
    drawIcon(iconIndex: number, x: any, y: any): void;
    drawFace(faceName: any, faceIndex: number, x: number, y: number, width?: number, height?: number): void;
    drawCharacter(characterName: string, characterIndex: number, x: number, y: number): void;
    drawItemName(item: ItemObject | null, x: number, y: number, width: number): void;
    drawCurrencyValue(value: string | number, unit: any, x: number, y: number, width: number): void;
    setBackgroundType(type: number): void;
    showBackgroundDimmer(): void;
    createDimmerSprite(): void;
    hideBackgroundDimmer(): void;
    updateBackgroundDimmer(): void;
    refreshDimmerBitmap(): void;
    playCursorSound(): void;
    playOkSound(): void;
    playBuzzerSound(): void;
}
